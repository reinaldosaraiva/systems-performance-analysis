#!/bin/bash
# Systems Performance Monitoring Stack
# Script para iniciar o ambiente completo de monitoramento

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir banners
print_banner() {
    echo -e "${BLUE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë         Systems Performance Monitoring Stack              ‚ïë"
    echo "‚ïë              Docker Compose Environment                   ‚ïë"
    echo "‚ïë              Based on Brendan Gregg USE Method             ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

# Fun√ß√£o para verificar depend√™ncias
check_dependencies() {
    echo -e "${YELLOW}üîç Checking dependencies...${NC}"
    
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå Docker is not installed${NC}"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        echo -e "${RED}‚ùå Docker Compose is not installed${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Dependencies OK${NC}"
}

# Fun√ß√£o para criar diret√≥rios necess√°rios
create_directories() {
    echo -e "${YELLOW}üìÅ Creating necessary directories...${NC}"
    
    mkdir -p logs
    mkdir -p data/{prometheus,grafana,victoria,alertmanager,redis}
    mkdir -p exports
    mkdir -p backups
    
    echo -e "${GREEN}‚úÖ Directories created${NC}"
}

# Fun√ß√£o para configurar permiss√µes
setup_permissions() {
    echo -e "${YELLOW}üîê Setting up permissions...${NC}"
    
    # Permiss√µes para volumes do Docker
    sudo chown -R 472:472 data/grafana 2>/dev/null || true
    sudo chown -R 65534:65534 data/prometheus 2>/dev/null || true
    sudo chown -R 1000:1000 data/victoria 2>/dev/null || true
    
    echo -e "${GREEN}‚úÖ Permissions configured${NC}"
}

# Fun√ß√£o para iniciar servi√ßos
start_services() {
    echo -e "${YELLOW}üöÄ Starting monitoring services...${NC}"
    
    # Inicia na ordem correta
    docker compose up -d redis victoria-metrics
    
    echo -e "${BLUE}‚è≥ Waiting for VictoriaMetrics...${NC}"
    sleep 10
    
    docker compose up -d prometheus alertmanager
    
    echo -e "${BLUE}‚è≥ Waiting for Prometheus...${NC}"
    sleep 15
    
    docker compose up -d grafana node-exporter
    
    echo -e "${BLUE}‚è≥ Waiting for Grafana...${NC}"
    sleep 10
    
    echo -e "${GREEN}‚úÖ All services started${NC}"
}

# Fun√ß√£o para verificar sa√∫de dos servi√ßos
check_health() {
    echo -e "${YELLOW}üè• Checking service health...${NC}"
    
    # Prometheus
    if curl -s http://localhost:9090/-/healthy > /dev/null; then
        echo -e "${GREEN}‚úÖ Prometheus: Healthy${NC}"
    else
        echo -e "${RED}‚ùå Prometheus: Unhealthy${NC}"
    fi
    
    # Grafana
    if curl -s http://localhost:3000/api/health > /dev/null; then
        echo -e "${GREEN}‚úÖ Grafana: Healthy${NC}"
    else
        echo -e "${RED}‚ùå Grafana: Unhealthy${NC}"
    fi
    
    # VictoriaMetrics
    if curl -s http://localhost:8428/health > /dev/null; then
        echo -e "${GREEN}‚úÖ VictoriaMetrics: Healthy${NC}"
    else
        echo -e "${RED}‚ùå VictoriaMetrics: Unhealthy${NC}"
    fi
    
    # AlertManager
    if curl -s http://localhost:9093/-/healthy > /dev/null; then
        echo -e "${GREEN}‚úÖ AlertManager: Healthy${NC}"
    else
        echo -e "${RED}‚ùå AlertManager: Unhealthy${NC}"
    fi
}

# Fun√ß√£o para mostrar informa√ß√µes de acesso
show_access_info() {
    echo -e "${BLUE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                    Access Information                      ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
    
    echo -e "${GREEN}üåê Web Interfaces:${NC}"
    echo -e "  ‚Ä¢ Prometheus: ${BLUE}http://localhost:9090${NC}"
    echo -e "  ‚Ä¢ Grafana: ${BLUE}http://localhost:3000${NC} (admin/admin123)"
    echo -e "  ‚Ä¢ AlertManager: ${BLUE}http://localhost:9093${NC}"
    echo -e "  ‚Ä¢ VictoriaMetrics: ${BLUE}http://localhost:8428${NC}"
    echo -e "  ‚Ä¢ Node Exporter: ${BLUE}http://localhost:9100/metrics${NC}"
    
    echo -e "\n${GREEN}üìä Data Sources:${NC}"
    echo -e "  ‚Ä¢ Local Prometheus: 15s retention, 30 days"
    echo -e "  ‚Ä¢ VictoriaMetrics: 30s retention, 90 days"
    echo -e "  ‚Ä¢ Remote Prometheus: 177.93.132.48:9090"
    
    echo -e "\n${GREEN}üîß Management Commands:${NC}"
    echo -e "  ‚Ä¢ View logs: ${YELLOW}docker-compose logs -f [service]${NC}"
    echo -e "  ‚Ä¢ Stop all: ${YELLOW}docker-compose down${NC}"
    echo -e "  ‚Ä¢ Restart: ${YELLOW}docker-compose restart [service]${NC}"
    echo -e "  ‚Ä¢ Status: ${YELLOW}docker-compose ps${NC}"
}

# Fun√ß√£o para configurar remote scraping
setup_remote_scraping() {
    echo -e "${YELLOW}üåç Setting up remote scraping...${NC}"
    
    # Testa conex√£o com servidor remoto
    if curl -s --connect-timeout 5 http://177.93.132.48:9090/-/healthy > /dev/null; then
        echo -e "${GREEN}‚úÖ Remote Prometheus accessible${NC}"
        
        # Recarrega configura√ß√£o do Prometheus
        curl -X POST http://localhost:9090/-/reload > /dev/null 2>&1 || true
        
        echo -e "${GREEN}‚úÖ Remote scraping configured${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Remote Prometheus not accessible, using local only${NC}"
    fi
}

# Fun√ß√£o principal
main() {
    print_banner
    
    case "${1:-start}" in
        "start")
            check_dependencies
            create_directories
            setup_permissions
            start_services
            setup_remote_scraping
            check_health
            show_access_info
            ;;
        "stop")
            echo -e "${YELLOW}üõë Stopping all services...${NC}"
            docker compose down
            echo -e "${GREEN}‚úÖ All services stopped${NC}"
            ;;
        "restart")
            echo -e "${YELLOW}üîÑ Restarting all services...${NC}"
            docker compose restart
            check_health
            ;;
        "status")
            docker compose ps
            check_health
            ;;
        "logs")
            docker compose logs -f "${2:-}"
            ;;
        "clean")
            echo -e "${YELLOW}üßπ Cleaning up...${NC}"
            docker compose down -v
            docker system prune -f
            echo -e "${GREEN}‚úÖ Cleanup completed${NC}"
            ;;
        "backup")
            echo -e "${YELLOW}üíæ Creating backup...${NC}"
            timestamp=$(date +%Y%m%d_%H%M%S)
            tar -czf "backups/monitoring_stack_${timestamp}.tar.gz" data/
            echo -e "${GREEN}‚úÖ Backup created: backups/monitoring_stack_${timestamp}.tar.gz${NC}"
            ;;
        "help"|"-h"|"--help")
            echo "Usage: $0 [command]"
            echo ""
            echo "Commands:"
            echo "  start     - Start all services (default)"
            echo "  stop      - Stop all services"
            echo "  restart   - Restart all services"
            echo "  status    - Show service status"
            echo "  logs      - Show logs (optional: service name)"
            echo "  clean     - Stop and remove all data"
            echo "  backup    - Create backup of data"
            echo "  help      - Show this help"
            ;;
        *)
            echo -e "${RED}‚ùå Unknown command: $1${NC}"
            echo "Use '$0 help' for available commands"
            exit 1
            ;;
    esac
}

# Executa fun√ß√£o principal
main "$@"